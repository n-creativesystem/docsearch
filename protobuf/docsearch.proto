syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "envoyproxy/protoc-gen-validate/validate/validate.proto";

package docsearch;

option go_package = "./protobuf";

service Docsearch {

    rpc LivenessCheck (google.protobuf.Empty) returns (LivenessCheckResponse) {
        option (google.api.http) = {
            get: "/v1/liveness_check"
        };
    }

    rpc ReadinessCheck (google.protobuf.Empty) returns (ReadinessCheckResponse) {
        option (google.api.http) = {
            get: "/v1/readiness_check"
        };
    }

    rpc Node (google.protobuf.Empty) returns (NodeResponse) {
        option (google.api.http) = {
            get: "/v1/node"
        };
    }

    rpc Join (JoinRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/cluster/{id}"
            body: "node"
        };
    }

    rpc Leave (LeaveRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/cluster/{id}"
        };
    }

    rpc Cluster (google.protobuf.Empty) returns (ClusterResponse) {
        option (google.api.http) = {
            get: "/v1/cluster"
        };
    }

    rpc Insert (Document) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/documents/{tenant}/{id=**}"
            body: "*"
        };
    }

    rpc Delete (DeleteDocument) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/documents/{tenant}/{id=**}"
        };
    }

    rpc Upload (Documents) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/documents/{tenant}"
            body: "*"
        };
    }

    rpc BulkDelete (DeleteDocuments) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/documents/{tenant}"
            body: "*"
        };
    }

    rpc Search (SearchRequest) returns (SearchResponse) {
        option (google.api.http) = {
            post: "/v1/search/{tenant}"
            body: "*"
        };
    }

    rpc UploadDictionary (UserDictionaryRecords) returns (DictionaryResponse) {
        option (google.api.http) = {
            put: "/v1/dictionaries/{id=**}"
            body: "*"
        };
    }

    rpc DeleteDictionary (DeleteDictionaryRequest) returns (DictionaryResponse) {
        option (google.api.http) = {
            delete: "/v1/dictionaries/{id=**}"
        };
    }

    rpc Watch (google.protobuf.Empty) returns (stream WatchResponse) {}

    rpc Metrics (google.protobuf.Empty) returns (MetricsResponse) {
        option (google.api.http) = {
            get: "/v1/metrics"
        };
    }
}

message LivenessCheckResponse {
    bool alive = 1;
}

message ReadinessCheckResponse {
    bool ready = 1;
}

message Metadata {
    string grpc_address = 1;
    string http_address = 2;
}

message Node {
    string raft_address = 1;
    Metadata metadata = 2;
    string state = 3;
}

message NodeResponse {
    Node node = 1;
}

message JoinRequest {
    string id = 1 [(validate.rules).string = {min_len: 1}];
    Node node = 2;
}

message LeaveRequest {
    string id = 1 [(validate.rules).string = {min_len: 1}];
}

message Cluster {
    map<string, Node> nodes = 1;
    string leader = 2;
}

message ClusterResponse {
    Cluster cluster = 1;
}

message Document {
    string tenant = 3 [(validate.rules).string = {min_len: 1}];
    string id = 1 [(validate.rules).string = {min_len: 1}];
    bytes fields = 2;
}

message Documents {
    string tenant = 2 [(validate.rules).string = {min_len: 1}];
    repeated Document requests = 1 [(validate.rules).repeated.min_items = 1];
}

message DeleteDocument {
    string id = 1 [(validate.rules).string = {min_len: 1}];
    string tenant = 2 [(validate.rules).string = {min_len: 1}];
}

message DeleteDocuments {
    string tenant = 2 [(validate.rules).string = {min_len: 1}];
    repeated DeleteDocument requests = 1 [(validate.rules).repeated.min_items = 1];
}


message MatchQuery {
    enum MatchOperator {
        Unknown = 0;
        Or = 1;
        And = 2;
    }
    string match = 1 [(validate.rules).string = {min_len: 1}];
	string field = 2 [(validate.rules).string = {min_len: 1}];
	string analyzer_name = 3;
	double boost = 4;
	MatchOperator operator = 5;
}

message MatchAllQuery {
    double boost = 1;
}

message MatchNoneQuery {
    double boost = 1;
}

message MatchPhraseQuery {
    string matchPhrase = 1 [(validate.rules).string = {min_len: 1}];
	string field = 2 [(validate.rules).string = {min_len: 1}];
	string analyzer_name = 3;
	double boost = 4;
	int32 slop = 5;
}

message MultiPhraseQuery {
    repeated string terms = 1 [(validate.rules).repeated.min_items = 1];
    string field = 2 [(validate.rules).string = {min_len: 1}];
    double boost = 3;
    int32 slop = 4;
}

message PrefixQuery {
    string prefix = 1 [(validate.rules).string = {min_len: 1}];
    string field = 2 [(validate.rules).string = {min_len: 1}];
    double boost = 3;
}

message RegexpQuery {
    string regexp = 1 [(validate.rules).string = {min_len: 1}];
    string field = 2 [(validate.rules).string = {min_len: 1}];
    double boost = 3;
}

message TermQuery {
	string term = 1 [(validate.rules).string = {min_len: 1}];
	string field = 2 [(validate.rules).string = {min_len: 1}];
	double boost = 3;
}

message TermRangeQuery {
	string min = 1;
	string max = 2;
	// bool inclusiveMin = 3;
	// bool inclusiveMax = 4;
	string field = 5 [(validate.rules).string = {min_len: 1}];
	double boost = 6;
}

message BooleanQuery {
	map<string, Query> musts = 1;
	map<string, Query> shoulds = 2;
	map<string, Query> mustNots = 3;
	double boost = 4;
	int32 minShould = 5;
}

message DateRangeQuery {
    string start = 1;
	string end = 2;
	// inclusiveStart bool
	// inclusiveEnd   bool
	string field = 5 [(validate.rules).string = {min_len: 1}];
	double boost = 6;
}

message GeoBoundingBoxQuery {
    double topLeftLon = 1;
    double topLeftLat = 2;
    double bottomRightLon = 3;
    double bottomRightLat = 4;
	string field = 5 [(validate.rules).string = {min_len: 1}];
	double boost = 6;
}

message GeoPoint {
    double lon = 1;
    double lat = 2;
}

message GeoDistanceQuery {
    GeoPoint point = 1 [(validate.rules).message.required = true];
    string distance = 2;
    string field = 3 [(validate.rules).string = {min_len: 1}];
    double boost = 4;
}

message GeoBoundingPolygonQuery {
	repeated GeoPoint points = 1 [(validate.rules).repeated.min_items = 1];
	string field = 2 [(validate.rules).string = {min_len: 1}];
	double boost = 3;
}

message NumericRangeQuery {
	double min = 1;
	double max = 2;
	// inclusiveMin bool
	// inclusiveMax bool
	string field = 5 [(validate.rules).string = {min_len: 1}];
	double boost = 6;
}

message WildcardQuery {
	string wildcard = 1  [(validate.rules).string = {min_len: 1}];
	string field = 2 [(validate.rules).string = {min_len: 1}];
	double boost = 3;

}

message FuzzyQuery {
	string term = 1 [(validate.rules).string = {min_len: 1}];
	int32 prefix = 2;
	int32 fuzziness = 3;
	string field = 4 [(validate.rules).string = {min_len: 1}];
	double boost = 5;
}

message Query {
    oneof query {
        MatchAllQuery matchAll = 1;
        MatchQuery matchQuery = 2;
        MatchNoneQuery matchNone = 3;
        MatchPhraseQuery matchPhrase = 4;
        MultiPhraseQuery multiPhrase = 5;
        PrefixQuery prefix = 6;
        RegexpQuery regexp = 7;
        TermQuery term = 8;
        TermRangeQuery termRange = 9;
        BooleanQuery bool = 10;
        DateRangeQuery dateRange = 11;
        GeoBoundingBoxQuery geoBoundingBox = 12;
        GeoDistanceQuery geoDistance = 13;
        GeoBoundingPolygonQuery geoBoundingPolygon = 14;
        NumericRangeQuery numericRange = 15;
        WildcardQuery wildcard = 16;
        FuzzyQuery fuzzy = 17;
    }
}

message SearchMetadataRequest {
    int32 from = 1;
    int32 size = 2;
}

message SearchRequest {
    // key:
    //  match_all
    //  match_query
    //  match_none
    //  match_phrase
    //  multi_phrase
    //  prefix
    //  regexp
    //  term
    //  term_range
    //  bool
    //  date_range
    //  geo_bounding_box
    //  geo_distance
    //  geo_bounding_polygon
    //  numeric_range
    //  wildcard
    //  fuzzy
    SearchMetadataRequest metadata = 1;
    map<string, Query> query = 2;
    string tenant = 3 [(validate.rules).string = {min_len: 1}];
}

message SearchResponse {
    bytes result = 1;
}

message UserDictionaryRecord {
    string text = 1 [(validate.rules).string = {min_len: 1}]; // 覚えさせたい文言
    repeated string tokens = 2 [(validate.rules).repeated.min_items = 1]; // 単語別のトークン
    repeated string yomi = 3 [(validate.rules).repeated.min_items = 1]; // 読み
    string pos = 4 [(validate.rules).string = {min_len: 1}]; // 品詞
}

message UserDictionaryRecords {
    string id = 1 [(validate.rules).string = {min_len: 1}];
    repeated UserDictionaryRecord records = 2 [(validate.rules).repeated.min_items = 1];
}

message DictionaryResponse {
    bool results = 1;
}

message DeleteDictionaryRequest {
    string id = 1 [(validate.rules).string = {min_len: 1}];
}

message DeleteDictionaries {
    repeated DeleteDictionaryRequest requests = 1 [(validate.rules).repeated.min_items = 1];
}

message Event {
    enum Type {
        Unknown = 0;
        JoinNode = 1;
        LeaveNode = 2;
        GetNode = 3;
        Upload = 4;
        Delete = 5;
        Search = 6;
        Dictionary = 7;
        RemoveDictionary = 8;
    }
    Type type = 1;
    google.protobuf.Any data = 2;
}

message WatchResponse {
    Event event = 1;
}

message GetMetadataRequest {
    string id = 1;
}

message SetMetadataRequest {
    string id = 1;
    Metadata metadata = 2;
}

message DeleteMetadataRequest {
    string id = 1;
}

message MetricsResponse {
    bytes metrics = 1;
}
