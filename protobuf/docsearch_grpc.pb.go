// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocsearchClient is the client API for Docsearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocsearchClient interface {
	LivenessCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LivenessCheckResponse, error)
	ReadinessCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadinessCheckResponse, error)
	Node(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeResponse, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Cluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterResponse, error)
	Insert(ctx context.Context, in *Document, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteDocument, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Upload(ctx context.Context, in *Documents, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkDelete(ctx context.Context, in *DeleteDocuments, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	UploadDictionary(ctx context.Context, in *UserDictionaryRecords, opts ...grpc.CallOption) (*DictionaryResponse, error)
	DeleteDictionary(ctx context.Context, in *DeleteDictionaryRequest, opts ...grpc.CallOption) (*DictionaryResponse, error)
	Watch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Docsearch_WatchClient, error)
	Metrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetricsResponse, error)
}

type docsearchClient struct {
	cc grpc.ClientConnInterface
}

func NewDocsearchClient(cc grpc.ClientConnInterface) DocsearchClient {
	return &docsearchClient{cc}
}

func (c *docsearchClient) LivenessCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LivenessCheckResponse, error) {
	out := new(LivenessCheckResponse)
	err := c.cc.Invoke(ctx, "/docsearch.Docsearch/LivenessCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsearchClient) ReadinessCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadinessCheckResponse, error) {
	out := new(ReadinessCheckResponse)
	err := c.cc.Invoke(ctx, "/docsearch.Docsearch/ReadinessCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsearchClient) Node(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/docsearch.Docsearch/Node", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsearchClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/docsearch.Docsearch/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsearchClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/docsearch.Docsearch/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsearchClient) Cluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterResponse, error) {
	out := new(ClusterResponse)
	err := c.cc.Invoke(ctx, "/docsearch.Docsearch/Cluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsearchClient) Insert(ctx context.Context, in *Document, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/docsearch.Docsearch/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsearchClient) Delete(ctx context.Context, in *DeleteDocument, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/docsearch.Docsearch/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsearchClient) Upload(ctx context.Context, in *Documents, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/docsearch.Docsearch/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsearchClient) BulkDelete(ctx context.Context, in *DeleteDocuments, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/docsearch.Docsearch/BulkDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsearchClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/docsearch.Docsearch/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsearchClient) UploadDictionary(ctx context.Context, in *UserDictionaryRecords, opts ...grpc.CallOption) (*DictionaryResponse, error) {
	out := new(DictionaryResponse)
	err := c.cc.Invoke(ctx, "/docsearch.Docsearch/UploadDictionary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsearchClient) DeleteDictionary(ctx context.Context, in *DeleteDictionaryRequest, opts ...grpc.CallOption) (*DictionaryResponse, error) {
	out := new(DictionaryResponse)
	err := c.cc.Invoke(ctx, "/docsearch.Docsearch/DeleteDictionary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsearchClient) Watch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Docsearch_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Docsearch_ServiceDesc.Streams[0], "/docsearch.Docsearch/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &docsearchWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Docsearch_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type docsearchWatchClient struct {
	grpc.ClientStream
}

func (x *docsearchWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *docsearchClient) Metrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetricsResponse, error) {
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, "/docsearch.Docsearch/Metrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocsearchServer is the server API for Docsearch service.
// All implementations must embed UnimplementedDocsearchServer
// for forward compatibility
type DocsearchServer interface {
	LivenessCheck(context.Context, *emptypb.Empty) (*LivenessCheckResponse, error)
	ReadinessCheck(context.Context, *emptypb.Empty) (*ReadinessCheckResponse, error)
	Node(context.Context, *emptypb.Empty) (*NodeResponse, error)
	Join(context.Context, *JoinRequest) (*emptypb.Empty, error)
	Leave(context.Context, *LeaveRequest) (*emptypb.Empty, error)
	Cluster(context.Context, *emptypb.Empty) (*ClusterResponse, error)
	Insert(context.Context, *Document) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteDocument) (*emptypb.Empty, error)
	Upload(context.Context, *Documents) (*emptypb.Empty, error)
	BulkDelete(context.Context, *DeleteDocuments) (*emptypb.Empty, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	UploadDictionary(context.Context, *UserDictionaryRecords) (*DictionaryResponse, error)
	DeleteDictionary(context.Context, *DeleteDictionaryRequest) (*DictionaryResponse, error)
	Watch(*emptypb.Empty, Docsearch_WatchServer) error
	Metrics(context.Context, *emptypb.Empty) (*MetricsResponse, error)
	mustEmbedUnimplementedDocsearchServer()
}

// UnimplementedDocsearchServer must be embedded to have forward compatible implementations.
type UnimplementedDocsearchServer struct {
}

func (UnimplementedDocsearchServer) LivenessCheck(context.Context, *emptypb.Empty) (*LivenessCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivenessCheck not implemented")
}
func (UnimplementedDocsearchServer) ReadinessCheck(context.Context, *emptypb.Empty) (*ReadinessCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadinessCheck not implemented")
}
func (UnimplementedDocsearchServer) Node(context.Context, *emptypb.Empty) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Node not implemented")
}
func (UnimplementedDocsearchServer) Join(context.Context, *JoinRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedDocsearchServer) Leave(context.Context, *LeaveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedDocsearchServer) Cluster(context.Context, *emptypb.Empty) (*ClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cluster not implemented")
}
func (UnimplementedDocsearchServer) Insert(context.Context, *Document) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedDocsearchServer) Delete(context.Context, *DeleteDocument) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDocsearchServer) Upload(context.Context, *Documents) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedDocsearchServer) BulkDelete(context.Context, *DeleteDocuments) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDelete not implemented")
}
func (UnimplementedDocsearchServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedDocsearchServer) UploadDictionary(context.Context, *UserDictionaryRecords) (*DictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDictionary not implemented")
}
func (UnimplementedDocsearchServer) DeleteDictionary(context.Context, *DeleteDictionaryRequest) (*DictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictionary not implemented")
}
func (UnimplementedDocsearchServer) Watch(*emptypb.Empty, Docsearch_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedDocsearchServer) Metrics(context.Context, *emptypb.Empty) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metrics not implemented")
}
func (UnimplementedDocsearchServer) mustEmbedUnimplementedDocsearchServer() {}

// UnsafeDocsearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocsearchServer will
// result in compilation errors.
type UnsafeDocsearchServer interface {
	mustEmbedUnimplementedDocsearchServer()
}

func RegisterDocsearchServer(s grpc.ServiceRegistrar, srv DocsearchServer) {
	s.RegisterService(&Docsearch_ServiceDesc, srv)
}

func _Docsearch_LivenessCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsearchServer).LivenessCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docsearch.Docsearch/LivenessCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsearchServer).LivenessCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docsearch_ReadinessCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsearchServer).ReadinessCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docsearch.Docsearch/ReadinessCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsearchServer).ReadinessCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docsearch_Node_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsearchServer).Node(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docsearch.Docsearch/Node",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsearchServer).Node(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docsearch_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsearchServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docsearch.Docsearch/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsearchServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docsearch_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsearchServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docsearch.Docsearch/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsearchServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docsearch_Cluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsearchServer).Cluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docsearch.Docsearch/Cluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsearchServer).Cluster(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docsearch_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsearchServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docsearch.Docsearch/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsearchServer).Insert(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docsearch_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsearchServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docsearch.Docsearch/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsearchServer).Delete(ctx, req.(*DeleteDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docsearch_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Documents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsearchServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docsearch.Docsearch/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsearchServer).Upload(ctx, req.(*Documents))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docsearch_BulkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocuments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsearchServer).BulkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docsearch.Docsearch/BulkDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsearchServer).BulkDelete(ctx, req.(*DeleteDocuments))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docsearch_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsearchServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docsearch.Docsearch/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsearchServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docsearch_UploadDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDictionaryRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsearchServer).UploadDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docsearch.Docsearch/UploadDictionary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsearchServer).UploadDictionary(ctx, req.(*UserDictionaryRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docsearch_DeleteDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsearchServer).DeleteDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docsearch.Docsearch/DeleteDictionary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsearchServer).DeleteDictionary(ctx, req.(*DeleteDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docsearch_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DocsearchServer).Watch(m, &docsearchWatchServer{stream})
}

type Docsearch_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type docsearchWatchServer struct {
	grpc.ServerStream
}

func (x *docsearchWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Docsearch_Metrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsearchServer).Metrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docsearch.Docsearch/Metrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsearchServer).Metrics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Docsearch_ServiceDesc is the grpc.ServiceDesc for Docsearch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Docsearch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "docsearch.Docsearch",
	HandlerType: (*DocsearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LivenessCheck",
			Handler:    _Docsearch_LivenessCheck_Handler,
		},
		{
			MethodName: "ReadinessCheck",
			Handler:    _Docsearch_ReadinessCheck_Handler,
		},
		{
			MethodName: "Node",
			Handler:    _Docsearch_Node_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Docsearch_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Docsearch_Leave_Handler,
		},
		{
			MethodName: "Cluster",
			Handler:    _Docsearch_Cluster_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _Docsearch_Insert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Docsearch_Delete_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _Docsearch_Upload_Handler,
		},
		{
			MethodName: "BulkDelete",
			Handler:    _Docsearch_BulkDelete_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Docsearch_Search_Handler,
		},
		{
			MethodName: "UploadDictionary",
			Handler:    _Docsearch_UploadDictionary_Handler,
		},
		{
			MethodName: "DeleteDictionary",
			Handler:    _Docsearch_DeleteDictionary_Handler,
		},
		{
			MethodName: "Metrics",
			Handler:    _Docsearch_Metrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Docsearch_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "docsearch.proto",
}
