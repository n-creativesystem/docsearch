// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: docsearch.proto

package protobuf

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MatchQuery_MatchOperator int32

const (
	MatchQuery_Unknown MatchQuery_MatchOperator = 0
	MatchQuery_Or      MatchQuery_MatchOperator = 1
	MatchQuery_And     MatchQuery_MatchOperator = 2
)

// Enum value maps for MatchQuery_MatchOperator.
var (
	MatchQuery_MatchOperator_name = map[int32]string{
		0: "Unknown",
		1: "Or",
		2: "And",
	}
	MatchQuery_MatchOperator_value = map[string]int32{
		"Unknown": 0,
		"Or":      1,
		"And":     2,
	}
)

func (x MatchQuery_MatchOperator) Enum() *MatchQuery_MatchOperator {
	p := new(MatchQuery_MatchOperator)
	*p = x
	return p
}

func (x MatchQuery_MatchOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchQuery_MatchOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_docsearch_proto_enumTypes[0].Descriptor()
}

func (MatchQuery_MatchOperator) Type() protoreflect.EnumType {
	return &file_docsearch_proto_enumTypes[0]
}

func (x MatchQuery_MatchOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchQuery_MatchOperator.Descriptor instead.
func (MatchQuery_MatchOperator) EnumDescriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{13, 0}
}

type Event_Type int32

const (
	Event_Unknown          Event_Type = 0
	Event_JoinNode         Event_Type = 1
	Event_LeaveNode        Event_Type = 2
	Event_GetNode          Event_Type = 3
	Event_Upload           Event_Type = 4
	Event_Delete           Event_Type = 5
	Event_Search           Event_Type = 6
	Event_Dictionary       Event_Type = 7
	Event_RemoveDictionary Event_Type = 8
)

// Enum value maps for Event_Type.
var (
	Event_Type_name = map[int32]string{
		0: "Unknown",
		1: "JoinNode",
		2: "LeaveNode",
		3: "GetNode",
		4: "Upload",
		5: "Delete",
		6: "Search",
		7: "Dictionary",
		8: "RemoveDictionary",
	}
	Event_Type_value = map[string]int32{
		"Unknown":          0,
		"JoinNode":         1,
		"LeaveNode":        2,
		"GetNode":          3,
		"Upload":           4,
		"Delete":           5,
		"Search":           6,
		"Dictionary":       7,
		"RemoveDictionary": 8,
	}
)

func (x Event_Type) Enum() *Event_Type {
	p := new(Event_Type)
	*p = x
	return p
}

func (x Event_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_docsearch_proto_enumTypes[1].Descriptor()
}

func (Event_Type) Type() protoreflect.EnumType {
	return &file_docsearch_proto_enumTypes[1]
}

func (x Event_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_Type.Descriptor instead.
func (Event_Type) EnumDescriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{40, 0}
}

type LivenessCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alive bool `protobuf:"varint,1,opt,name=alive,proto3" json:"alive,omitempty"`
}

func (x *LivenessCheckResponse) Reset() {
	*x = LivenessCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessCheckResponse) ProtoMessage() {}

func (x *LivenessCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessCheckResponse.ProtoReflect.Descriptor instead.
func (*LivenessCheckResponse) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{0}
}

func (x *LivenessCheckResponse) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

type ReadinessCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *ReadinessCheckResponse) Reset() {
	*x = ReadinessCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadinessCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadinessCheckResponse) ProtoMessage() {}

func (x *ReadinessCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadinessCheckResponse.ProtoReflect.Descriptor instead.
func (*ReadinessCheckResponse) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{1}
}

func (x *ReadinessCheckResponse) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrpcAddress string `protobuf:"bytes,1,opt,name=grpc_address,json=grpcAddress,proto3" json:"grpc_address,omitempty"`
	HttpAddress string `protobuf:"bytes,2,opt,name=http_address,json=httpAddress,proto3" json:"http_address,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{2}
}

func (x *Metadata) GetGrpcAddress() string {
	if x != nil {
		return x.GrpcAddress
	}
	return ""
}

func (x *Metadata) GetHttpAddress() string {
	if x != nil {
		return x.HttpAddress
	}
	return ""
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaftAddress string    `protobuf:"bytes,1,opt,name=raft_address,json=raftAddress,proto3" json:"raft_address,omitempty"`
	Metadata    *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	State       string    `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{3}
}

func (x *Node) GetRaftAddress() string {
	if x != nil {
		return x.RaftAddress
	}
	return ""
}

func (x *Node) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Node) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type NodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *NodeResponse) Reset() {
	*x = NodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResponse) ProtoMessage() {}

func (x *NodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResponse.ProtoReflect.Descriptor instead.
func (*NodeResponse) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{4}
}

func (x *NodeResponse) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node *Node  `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{5}
}

func (x *JoinRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JoinRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type LeaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LeaveRequest) Reset() {
	*x = LeaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveRequest) ProtoMessage() {}

func (x *LeaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveRequest.ProtoReflect.Descriptor instead.
func (*LeaveRequest) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{6}
}

func (x *LeaveRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes  map[string]*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Leader string           `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{7}
}

func (x *Cluster) GetNodes() map[string]*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Cluster) GetLeader() string {
	if x != nil {
		return x.Leader
	}
	return ""
}

type ClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *ClusterResponse) Reset() {
	*x = ClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResponse) ProtoMessage() {}

func (x *ClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResponse.ProtoReflect.Descriptor instead.
func (*ClusterResponse) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterResponse) GetCluster() *Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields []byte `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{9}
}

func (x *Document) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *Document) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Document) GetFields() []byte {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Documents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant   string      `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Requests []*Document `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *Documents) Reset() {
	*x = Documents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Documents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Documents) ProtoMessage() {}

func (x *Documents) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Documents.ProtoReflect.Descriptor instead.
func (*Documents) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{10}
}

func (x *Documents) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *Documents) GetRequests() []*Document {
	if x != nil {
		return x.Requests
	}
	return nil
}

type DeleteDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *DeleteDocument) Reset() {
	*x = DeleteDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDocument) ProtoMessage() {}

func (x *DeleteDocument) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDocument.ProtoReflect.Descriptor instead.
func (*DeleteDocument) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteDocument) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteDocument) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

type DeleteDocuments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant   string            `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Requests []*DeleteDocument `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *DeleteDocuments) Reset() {
	*x = DeleteDocuments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDocuments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDocuments) ProtoMessage() {}

func (x *DeleteDocuments) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDocuments.ProtoReflect.Descriptor instead.
func (*DeleteDocuments) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteDocuments) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *DeleteDocuments) GetRequests() []*DeleteDocument {
	if x != nil {
		return x.Requests
	}
	return nil
}

type MatchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match        string                   `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Field        string                   `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	AnalyzerName string                   `protobuf:"bytes,3,opt,name=analyzer_name,json=analyzerName,proto3" json:"analyzer_name,omitempty"`
	Boost        float64                  `protobuf:"fixed64,4,opt,name=boost,proto3" json:"boost,omitempty"`
	Operator     MatchQuery_MatchOperator `protobuf:"varint,5,opt,name=operator,proto3,enum=docsearch.MatchQuery_MatchOperator" json:"operator,omitempty"`
}

func (x *MatchQuery) Reset() {
	*x = MatchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchQuery) ProtoMessage() {}

func (x *MatchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchQuery.ProtoReflect.Descriptor instead.
func (*MatchQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{13}
}

func (x *MatchQuery) GetMatch() string {
	if x != nil {
		return x.Match
	}
	return ""
}

func (x *MatchQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *MatchQuery) GetAnalyzerName() string {
	if x != nil {
		return x.AnalyzerName
	}
	return ""
}

func (x *MatchQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

func (x *MatchQuery) GetOperator() MatchQuery_MatchOperator {
	if x != nil {
		return x.Operator
	}
	return MatchQuery_Unknown
}

type MatchAllQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost float64 `protobuf:"fixed64,1,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *MatchAllQuery) Reset() {
	*x = MatchAllQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchAllQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchAllQuery) ProtoMessage() {}

func (x *MatchAllQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchAllQuery.ProtoReflect.Descriptor instead.
func (*MatchAllQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{14}
}

func (x *MatchAllQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type MatchNoneQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boost float64 `protobuf:"fixed64,1,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *MatchNoneQuery) Reset() {
	*x = MatchNoneQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchNoneQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchNoneQuery) ProtoMessage() {}

func (x *MatchNoneQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchNoneQuery.ProtoReflect.Descriptor instead.
func (*MatchNoneQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{15}
}

func (x *MatchNoneQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type MatchPhraseQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchPhrase  string  `protobuf:"bytes,1,opt,name=matchPhrase,proto3" json:"matchPhrase,omitempty"`
	Field        string  `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	AnalyzerName string  `protobuf:"bytes,3,opt,name=analyzer_name,json=analyzerName,proto3" json:"analyzer_name,omitempty"`
	Boost        float64 `protobuf:"fixed64,4,opt,name=boost,proto3" json:"boost,omitempty"`
	Slop         int32   `protobuf:"varint,5,opt,name=slop,proto3" json:"slop,omitempty"`
}

func (x *MatchPhraseQuery) Reset() {
	*x = MatchPhraseQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPhraseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPhraseQuery) ProtoMessage() {}

func (x *MatchPhraseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPhraseQuery.ProtoReflect.Descriptor instead.
func (*MatchPhraseQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{16}
}

func (x *MatchPhraseQuery) GetMatchPhrase() string {
	if x != nil {
		return x.MatchPhrase
	}
	return ""
}

func (x *MatchPhraseQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *MatchPhraseQuery) GetAnalyzerName() string {
	if x != nil {
		return x.AnalyzerName
	}
	return ""
}

func (x *MatchPhraseQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

func (x *MatchPhraseQuery) GetSlop() int32 {
	if x != nil {
		return x.Slop
	}
	return 0
}

type MultiPhraseQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terms []string `protobuf:"bytes,1,rep,name=terms,proto3" json:"terms,omitempty"`
	Field string   `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Boost float64  `protobuf:"fixed64,3,opt,name=boost,proto3" json:"boost,omitempty"`
	Slop  int32    `protobuf:"varint,4,opt,name=slop,proto3" json:"slop,omitempty"`
}

func (x *MultiPhraseQuery) Reset() {
	*x = MultiPhraseQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiPhraseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiPhraseQuery) ProtoMessage() {}

func (x *MultiPhraseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiPhraseQuery.ProtoReflect.Descriptor instead.
func (*MultiPhraseQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{17}
}

func (x *MultiPhraseQuery) GetTerms() []string {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *MultiPhraseQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *MultiPhraseQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

func (x *MultiPhraseQuery) GetSlop() int32 {
	if x != nil {
		return x.Slop
	}
	return 0
}

type PrefixQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string  `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Field  string  `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Boost  float64 `protobuf:"fixed64,3,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *PrefixQuery) Reset() {
	*x = PrefixQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixQuery) ProtoMessage() {}

func (x *PrefixQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixQuery.ProtoReflect.Descriptor instead.
func (*PrefixQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{18}
}

func (x *PrefixQuery) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *PrefixQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *PrefixQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type RegexpQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regexp string  `protobuf:"bytes,1,opt,name=regexp,proto3" json:"regexp,omitempty"`
	Field  string  `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Boost  float64 `protobuf:"fixed64,3,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *RegexpQuery) Reset() {
	*x = RegexpQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegexpQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexpQuery) ProtoMessage() {}

func (x *RegexpQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexpQuery.ProtoReflect.Descriptor instead.
func (*RegexpQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{19}
}

func (x *RegexpQuery) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

func (x *RegexpQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *RegexpQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type TermQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term  string  `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	Field string  `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Boost float64 `protobuf:"fixed64,3,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *TermQuery) Reset() {
	*x = TermQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermQuery) ProtoMessage() {}

func (x *TermQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermQuery.ProtoReflect.Descriptor instead.
func (*TermQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{20}
}

func (x *TermQuery) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *TermQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *TermQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type TermRangeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min string `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max string `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	// bool inclusiveMin = 3;
	// bool inclusiveMax = 4;
	Field string  `protobuf:"bytes,5,opt,name=field,proto3" json:"field,omitempty"`
	Boost float64 `protobuf:"fixed64,6,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *TermRangeQuery) Reset() {
	*x = TermRangeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermRangeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermRangeQuery) ProtoMessage() {}

func (x *TermRangeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermRangeQuery.ProtoReflect.Descriptor instead.
func (*TermRangeQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{21}
}

func (x *TermRangeQuery) GetMin() string {
	if x != nil {
		return x.Min
	}
	return ""
}

func (x *TermRangeQuery) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

func (x *TermRangeQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *TermRangeQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type BooleanQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Musts     map[string]*Query `protobuf:"bytes,1,rep,name=musts,proto3" json:"musts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Shoulds   map[string]*Query `protobuf:"bytes,2,rep,name=shoulds,proto3" json:"shoulds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MustNots  map[string]*Query `protobuf:"bytes,3,rep,name=mustNots,proto3" json:"mustNots,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Boost     float64           `protobuf:"fixed64,4,opt,name=boost,proto3" json:"boost,omitempty"`
	MinShould int32             `protobuf:"varint,5,opt,name=minShould,proto3" json:"minShould,omitempty"`
}

func (x *BooleanQuery) Reset() {
	*x = BooleanQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanQuery) ProtoMessage() {}

func (x *BooleanQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanQuery.ProtoReflect.Descriptor instead.
func (*BooleanQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{22}
}

func (x *BooleanQuery) GetMusts() map[string]*Query {
	if x != nil {
		return x.Musts
	}
	return nil
}

func (x *BooleanQuery) GetShoulds() map[string]*Query {
	if x != nil {
		return x.Shoulds
	}
	return nil
}

func (x *BooleanQuery) GetMustNots() map[string]*Query {
	if x != nil {
		return x.MustNots
	}
	return nil
}

func (x *BooleanQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

func (x *BooleanQuery) GetMinShould() int32 {
	if x != nil {
		return x.MinShould
	}
	return 0
}

type DateRangeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	// inclusiveStart bool
	// inclusiveEnd   bool
	Field string  `protobuf:"bytes,5,opt,name=field,proto3" json:"field,omitempty"`
	Boost float64 `protobuf:"fixed64,6,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *DateRangeQuery) Reset() {
	*x = DateRangeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateRangeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateRangeQuery) ProtoMessage() {}

func (x *DateRangeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateRangeQuery.ProtoReflect.Descriptor instead.
func (*DateRangeQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{23}
}

func (x *DateRangeQuery) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *DateRangeQuery) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *DateRangeQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *DateRangeQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type GeoBoundingBoxQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopLeftLon     float64 `protobuf:"fixed64,1,opt,name=topLeftLon,proto3" json:"topLeftLon,omitempty"`
	TopLeftLat     float64 `protobuf:"fixed64,2,opt,name=topLeftLat,proto3" json:"topLeftLat,omitempty"`
	BottomRightLon float64 `protobuf:"fixed64,3,opt,name=bottomRightLon,proto3" json:"bottomRightLon,omitempty"`
	BottomRightLat float64 `protobuf:"fixed64,4,opt,name=bottomRightLat,proto3" json:"bottomRightLat,omitempty"`
	Field          string  `protobuf:"bytes,5,opt,name=field,proto3" json:"field,omitempty"`
	Boost          float64 `protobuf:"fixed64,6,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *GeoBoundingBoxQuery) Reset() {
	*x = GeoBoundingBoxQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoBoundingBoxQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoBoundingBoxQuery) ProtoMessage() {}

func (x *GeoBoundingBoxQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoBoundingBoxQuery.ProtoReflect.Descriptor instead.
func (*GeoBoundingBoxQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{24}
}

func (x *GeoBoundingBoxQuery) GetTopLeftLon() float64 {
	if x != nil {
		return x.TopLeftLon
	}
	return 0
}

func (x *GeoBoundingBoxQuery) GetTopLeftLat() float64 {
	if x != nil {
		return x.TopLeftLat
	}
	return 0
}

func (x *GeoBoundingBoxQuery) GetBottomRightLon() float64 {
	if x != nil {
		return x.BottomRightLon
	}
	return 0
}

func (x *GeoBoundingBoxQuery) GetBottomRightLat() float64 {
	if x != nil {
		return x.BottomRightLat
	}
	return 0
}

func (x *GeoBoundingBoxQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *GeoBoundingBoxQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type GeoPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lon float64 `protobuf:"fixed64,1,opt,name=lon,proto3" json:"lon,omitempty"`
	Lat float64 `protobuf:"fixed64,2,opt,name=lat,proto3" json:"lat,omitempty"`
}

func (x *GeoPoint) Reset() {
	*x = GeoPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPoint) ProtoMessage() {}

func (x *GeoPoint) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPoint.ProtoReflect.Descriptor instead.
func (*GeoPoint) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{25}
}

func (x *GeoPoint) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *GeoPoint) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

type GeoDistanceQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point    *GeoPoint `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`
	Distance string    `protobuf:"bytes,2,opt,name=distance,proto3" json:"distance,omitempty"`
	Field    string    `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	Boost    float64   `protobuf:"fixed64,4,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *GeoDistanceQuery) Reset() {
	*x = GeoDistanceQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoDistanceQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoDistanceQuery) ProtoMessage() {}

func (x *GeoDistanceQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoDistanceQuery.ProtoReflect.Descriptor instead.
func (*GeoDistanceQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{26}
}

func (x *GeoDistanceQuery) GetPoint() *GeoPoint {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *GeoDistanceQuery) GetDistance() string {
	if x != nil {
		return x.Distance
	}
	return ""
}

func (x *GeoDistanceQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *GeoDistanceQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type GeoBoundingPolygonQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*GeoPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	Field  string      `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Boost  float64     `protobuf:"fixed64,3,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *GeoBoundingPolygonQuery) Reset() {
	*x = GeoBoundingPolygonQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoBoundingPolygonQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoBoundingPolygonQuery) ProtoMessage() {}

func (x *GeoBoundingPolygonQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoBoundingPolygonQuery.ProtoReflect.Descriptor instead.
func (*GeoBoundingPolygonQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{27}
}

func (x *GeoBoundingPolygonQuery) GetPoints() []*GeoPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *GeoBoundingPolygonQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *GeoBoundingPolygonQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type NumericRangeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"`
	Max float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"`
	// inclusiveMin bool
	// inclusiveMax bool
	Field string  `protobuf:"bytes,5,opt,name=field,proto3" json:"field,omitempty"`
	Boost float64 `protobuf:"fixed64,6,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *NumericRangeQuery) Reset() {
	*x = NumericRangeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericRangeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericRangeQuery) ProtoMessage() {}

func (x *NumericRangeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericRangeQuery.ProtoReflect.Descriptor instead.
func (*NumericRangeQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{28}
}

func (x *NumericRangeQuery) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *NumericRangeQuery) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *NumericRangeQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *NumericRangeQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type WildcardQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wildcard string  `protobuf:"bytes,1,opt,name=wildcard,proto3" json:"wildcard,omitempty"`
	Field    string  `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Boost    float64 `protobuf:"fixed64,3,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *WildcardQuery) Reset() {
	*x = WildcardQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WildcardQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WildcardQuery) ProtoMessage() {}

func (x *WildcardQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WildcardQuery.ProtoReflect.Descriptor instead.
func (*WildcardQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{29}
}

func (x *WildcardQuery) GetWildcard() string {
	if x != nil {
		return x.Wildcard
	}
	return ""
}

func (x *WildcardQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *WildcardQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type FuzzyQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term      string  `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	Prefix    int32   `protobuf:"varint,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Fuzziness int32   `protobuf:"varint,3,opt,name=fuzziness,proto3" json:"fuzziness,omitempty"`
	Field     string  `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`
	Boost     float64 `protobuf:"fixed64,5,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *FuzzyQuery) Reset() {
	*x = FuzzyQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzyQuery) ProtoMessage() {}

func (x *FuzzyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzyQuery.ProtoReflect.Descriptor instead.
func (*FuzzyQuery) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{30}
}

func (x *FuzzyQuery) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *FuzzyQuery) GetPrefix() int32 {
	if x != nil {
		return x.Prefix
	}
	return 0
}

func (x *FuzzyQuery) GetFuzziness() int32 {
	if x != nil {
		return x.Fuzziness
	}
	return 0
}

func (x *FuzzyQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FuzzyQuery) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//	*Query_MatchAll
	//	*Query_MatchQuery
	//	*Query_MatchNone
	//	*Query_MatchPhrase
	//	*Query_MultiPhrase
	//	*Query_Prefix
	//	*Query_Regexp
	//	*Query_Term
	//	*Query_TermRange
	//	*Query_Bool
	//	*Query_DateRange
	//	*Query_GeoBoundingBox
	//	*Query_GeoDistance
	//	*Query_GeoBoundingPolygon
	//	*Query_NumericRange
	//	*Query_Wildcard
	//	*Query_Fuzzy
	Query isQuery_Query `protobuf_oneof:"query"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{31}
}

func (m *Query) GetQuery() isQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *Query) GetMatchAll() *MatchAllQuery {
	if x, ok := x.GetQuery().(*Query_MatchAll); ok {
		return x.MatchAll
	}
	return nil
}

func (x *Query) GetMatchQuery() *MatchQuery {
	if x, ok := x.GetQuery().(*Query_MatchQuery); ok {
		return x.MatchQuery
	}
	return nil
}

func (x *Query) GetMatchNone() *MatchNoneQuery {
	if x, ok := x.GetQuery().(*Query_MatchNone); ok {
		return x.MatchNone
	}
	return nil
}

func (x *Query) GetMatchPhrase() *MatchPhraseQuery {
	if x, ok := x.GetQuery().(*Query_MatchPhrase); ok {
		return x.MatchPhrase
	}
	return nil
}

func (x *Query) GetMultiPhrase() *MultiPhraseQuery {
	if x, ok := x.GetQuery().(*Query_MultiPhrase); ok {
		return x.MultiPhrase
	}
	return nil
}

func (x *Query) GetPrefix() *PrefixQuery {
	if x, ok := x.GetQuery().(*Query_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (x *Query) GetRegexp() *RegexpQuery {
	if x, ok := x.GetQuery().(*Query_Regexp); ok {
		return x.Regexp
	}
	return nil
}

func (x *Query) GetTerm() *TermQuery {
	if x, ok := x.GetQuery().(*Query_Term); ok {
		return x.Term
	}
	return nil
}

func (x *Query) GetTermRange() *TermRangeQuery {
	if x, ok := x.GetQuery().(*Query_TermRange); ok {
		return x.TermRange
	}
	return nil
}

func (x *Query) GetBool() *BooleanQuery {
	if x, ok := x.GetQuery().(*Query_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *Query) GetDateRange() *DateRangeQuery {
	if x, ok := x.GetQuery().(*Query_DateRange); ok {
		return x.DateRange
	}
	return nil
}

func (x *Query) GetGeoBoundingBox() *GeoBoundingBoxQuery {
	if x, ok := x.GetQuery().(*Query_GeoBoundingBox); ok {
		return x.GeoBoundingBox
	}
	return nil
}

func (x *Query) GetGeoDistance() *GeoDistanceQuery {
	if x, ok := x.GetQuery().(*Query_GeoDistance); ok {
		return x.GeoDistance
	}
	return nil
}

func (x *Query) GetGeoBoundingPolygon() *GeoBoundingPolygonQuery {
	if x, ok := x.GetQuery().(*Query_GeoBoundingPolygon); ok {
		return x.GeoBoundingPolygon
	}
	return nil
}

func (x *Query) GetNumericRange() *NumericRangeQuery {
	if x, ok := x.GetQuery().(*Query_NumericRange); ok {
		return x.NumericRange
	}
	return nil
}

func (x *Query) GetWildcard() *WildcardQuery {
	if x, ok := x.GetQuery().(*Query_Wildcard); ok {
		return x.Wildcard
	}
	return nil
}

func (x *Query) GetFuzzy() *FuzzyQuery {
	if x, ok := x.GetQuery().(*Query_Fuzzy); ok {
		return x.Fuzzy
	}
	return nil
}

type isQuery_Query interface {
	isQuery_Query()
}

type Query_MatchAll struct {
	MatchAll *MatchAllQuery `protobuf:"bytes,1,opt,name=matchAll,proto3,oneof"`
}

type Query_MatchQuery struct {
	MatchQuery *MatchQuery `protobuf:"bytes,2,opt,name=matchQuery,proto3,oneof"`
}

type Query_MatchNone struct {
	MatchNone *MatchNoneQuery `protobuf:"bytes,3,opt,name=matchNone,proto3,oneof"`
}

type Query_MatchPhrase struct {
	MatchPhrase *MatchPhraseQuery `protobuf:"bytes,4,opt,name=matchPhrase,proto3,oneof"`
}

type Query_MultiPhrase struct {
	MultiPhrase *MultiPhraseQuery `protobuf:"bytes,5,opt,name=multiPhrase,proto3,oneof"`
}

type Query_Prefix struct {
	Prefix *PrefixQuery `protobuf:"bytes,6,opt,name=prefix,proto3,oneof"`
}

type Query_Regexp struct {
	Regexp *RegexpQuery `protobuf:"bytes,7,opt,name=regexp,proto3,oneof"`
}

type Query_Term struct {
	Term *TermQuery `protobuf:"bytes,8,opt,name=term,proto3,oneof"`
}

type Query_TermRange struct {
	TermRange *TermRangeQuery `protobuf:"bytes,9,opt,name=termRange,proto3,oneof"`
}

type Query_Bool struct {
	Bool *BooleanQuery `protobuf:"bytes,10,opt,name=bool,proto3,oneof"`
}

type Query_DateRange struct {
	DateRange *DateRangeQuery `protobuf:"bytes,11,opt,name=dateRange,proto3,oneof"`
}

type Query_GeoBoundingBox struct {
	GeoBoundingBox *GeoBoundingBoxQuery `protobuf:"bytes,12,opt,name=geoBoundingBox,proto3,oneof"`
}

type Query_GeoDistance struct {
	GeoDistance *GeoDistanceQuery `protobuf:"bytes,13,opt,name=geoDistance,proto3,oneof"`
}

type Query_GeoBoundingPolygon struct {
	GeoBoundingPolygon *GeoBoundingPolygonQuery `protobuf:"bytes,14,opt,name=geoBoundingPolygon,proto3,oneof"`
}

type Query_NumericRange struct {
	NumericRange *NumericRangeQuery `protobuf:"bytes,15,opt,name=numericRange,proto3,oneof"`
}

type Query_Wildcard struct {
	Wildcard *WildcardQuery `protobuf:"bytes,16,opt,name=wildcard,proto3,oneof"`
}

type Query_Fuzzy struct {
	Fuzzy *FuzzyQuery `protobuf:"bytes,17,opt,name=fuzzy,proto3,oneof"`
}

func (*Query_MatchAll) isQuery_Query() {}

func (*Query_MatchQuery) isQuery_Query() {}

func (*Query_MatchNone) isQuery_Query() {}

func (*Query_MatchPhrase) isQuery_Query() {}

func (*Query_MultiPhrase) isQuery_Query() {}

func (*Query_Prefix) isQuery_Query() {}

func (*Query_Regexp) isQuery_Query() {}

func (*Query_Term) isQuery_Query() {}

func (*Query_TermRange) isQuery_Query() {}

func (*Query_Bool) isQuery_Query() {}

func (*Query_DateRange) isQuery_Query() {}

func (*Query_GeoBoundingBox) isQuery_Query() {}

func (*Query_GeoDistance) isQuery_Query() {}

func (*Query_GeoBoundingPolygon) isQuery_Query() {}

func (*Query_NumericRange) isQuery_Query() {}

func (*Query_Wildcard) isQuery_Query() {}

func (*Query_Fuzzy) isQuery_Query() {}

type SearchMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From int32 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *SearchMetadataRequest) Reset() {
	*x = SearchMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMetadataRequest) ProtoMessage() {}

func (x *SearchMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMetadataRequest.ProtoReflect.Descriptor instead.
func (*SearchMetadataRequest) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{32}
}

func (x *SearchMetadataRequest) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *SearchMetadataRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key:
	//  match_all
	//  match_query
	//  match_none
	//  match_phrase
	//  multi_phrase
	//  prefix
	//  regexp
	//  term
	//  term_range
	//  bool
	//  date_range
	//  geo_bounding_box
	//  geo_distance
	//  geo_bounding_polygon
	//  numeric_range
	//  wildcard
	//  fuzzy
	Metadata *SearchMetadataRequest `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Query    map[string]*Query      `protobuf:"bytes,2,rep,name=query,proto3" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tenant   string                 `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{33}
}

func (x *SearchRequest) GetMetadata() *SearchMetadataRequest {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SearchRequest) GetQuery() map[string]*Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{34}
}

func (x *SearchResponse) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

type UserDictionaryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text   string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`     // 覚えさせたい文言
	Tokens []string `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"` // 単語別のトークン
	Yomi   []string `protobuf:"bytes,3,rep,name=yomi,proto3" json:"yomi,omitempty"`     // 読み
	Pos    string   `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`       // 品詞
}

func (x *UserDictionaryRecord) Reset() {
	*x = UserDictionaryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDictionaryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDictionaryRecord) ProtoMessage() {}

func (x *UserDictionaryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDictionaryRecord.ProtoReflect.Descriptor instead.
func (*UserDictionaryRecord) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{35}
}

func (x *UserDictionaryRecord) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *UserDictionaryRecord) GetTokens() []string {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *UserDictionaryRecord) GetYomi() []string {
	if x != nil {
		return x.Yomi
	}
	return nil
}

func (x *UserDictionaryRecord) GetPos() string {
	if x != nil {
		return x.Pos
	}
	return ""
}

type UserDictionaryRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Records []*UserDictionaryRecord `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *UserDictionaryRecords) Reset() {
	*x = UserDictionaryRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDictionaryRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDictionaryRecords) ProtoMessage() {}

func (x *UserDictionaryRecords) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDictionaryRecords.ProtoReflect.Descriptor instead.
func (*UserDictionaryRecords) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{36}
}

func (x *UserDictionaryRecords) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserDictionaryRecords) GetRecords() []*UserDictionaryRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type DictionaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results bool `protobuf:"varint,1,opt,name=results,proto3" json:"results,omitempty"`
}

func (x *DictionaryResponse) Reset() {
	*x = DictionaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DictionaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionaryResponse) ProtoMessage() {}

func (x *DictionaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionaryResponse.ProtoReflect.Descriptor instead.
func (*DictionaryResponse) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{37}
}

func (x *DictionaryResponse) GetResults() bool {
	if x != nil {
		return x.Results
	}
	return false
}

type DeleteDictionaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDictionaryRequest) Reset() {
	*x = DeleteDictionaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDictionaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDictionaryRequest) ProtoMessage() {}

func (x *DeleteDictionaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDictionaryRequest.ProtoReflect.Descriptor instead.
func (*DeleteDictionaryRequest) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteDictionaryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteDictionaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*DeleteDictionaryRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *DeleteDictionaries) Reset() {
	*x = DeleteDictionaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDictionaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDictionaries) ProtoMessage() {}

func (x *DeleteDictionaries) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDictionaries.ProtoReflect.Descriptor instead.
func (*DeleteDictionaries) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteDictionaries) GetRequests() []*DeleteDictionaryRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Event_Type `protobuf:"varint,1,opt,name=type,proto3,enum=docsearch.Event_Type" json:"type,omitempty"`
	Data *anypb.Any `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{40}
}

func (x *Event) GetType() Event_Type {
	if x != nil {
		return x.Type
	}
	return Event_Unknown
}

func (x *Event) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type WatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *WatchResponse) Reset() {
	*x = WatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchResponse) ProtoMessage() {}

func (x *WatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchResponse.ProtoReflect.Descriptor instead.
func (*WatchResponse) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{41}
}

func (x *WatchResponse) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type GetMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetMetadataRequest) Reset() {
	*x = GetMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetadataRequest) ProtoMessage() {}

func (x *GetMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetMetadataRequest) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{42}
}

func (x *GetMetadataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SetMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *SetMetadataRequest) Reset() {
	*x = SetMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMetadataRequest) ProtoMessage() {}

func (x *SetMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMetadataRequest.ProtoReflect.Descriptor instead.
func (*SetMetadataRequest) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{43}
}

func (x *SetMetadataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetMetadataRequest) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DeleteMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteMetadataRequest) Reset() {
	*x = DeleteMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMetadataRequest) ProtoMessage() {}

func (x *DeleteMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMetadataRequest.ProtoReflect.Descriptor instead.
func (*DeleteMetadataRequest) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteMetadataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type MetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []byte `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *MetricsResponse) Reset() {
	*x = MetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docsearch_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponse) ProtoMessage() {}

func (x *MetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_docsearch_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponse.ProtoReflect.Descriptor instead.
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return file_docsearch_proto_rawDescGZIP(), []int{45}
}

func (x *MetricsResponse) GetMetrics() []byte {
	if x != nil {
		return x.Metrics
	}
	return nil
}

var File_docsearch_proto protoreflect.FileDescriptor

var file_docsearch_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x36, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x15, 0x4c, 0x69,
	0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x2e, 0x0a, 0x16, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x22, 0x50, 0x0a, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x70,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x68, 0x74, 0x74, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x70, 0x0a, 0x04, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x66, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x33, 0x0a,
	0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6f,
	0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x22, 0x4b, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22,
	0x27, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x07, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x1a, 0x49, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x0f,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x5c, 0x0a,
	0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x67, 0x0a, 0x09, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6f,
	0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x22, 0x73, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x2d,
	0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x72, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e, 0x64, 0x10, 0x02, 0x22, 0x25, 0x0a,
	0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x6e,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a,
	0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x29, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x70, 0x22, 0x7b, 0x0a, 0x10, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e,
	0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x1d,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x70, 0x22, 0x63, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x0b,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x1d, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x22, 0x5d, 0x0a, 0x09, 0x54, 0x65, 0x72, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b,
	0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x22, 0x69, 0x0a, 0x0e, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1d, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22, 0xe8, 0x03, 0x0a, 0x0c,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x05,
	0x6d, 0x75, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f,
	0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x75, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x6d, 0x75, 0x73, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x75, 0x73, 0x74, 0x4e, 0x6f,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x1a, 0x4a, 0x0a,
	0x0a, 0x4d, 0x75, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64,
	0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0c, 0x53, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x63,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x0d, 0x4d, 0x75, 0x73, 0x74, 0x4e,
	0x6f, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x63, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6d, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x12, 0x1d, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x6f, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x61, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x4c, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x62,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x61, 0x74, 0x12, 0x1d, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f,
	0x73, 0x74, 0x22, 0x2e, 0x0a, 0x08, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x61, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x6f, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22, 0x85, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x79, 0x67, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x63, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x11, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1d,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x0d, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22, 0x94,
	0x01, 0x0a, 0x0a, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x1d, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22, 0xff, 0x07, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x36, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x12, 0x37, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6f,
	0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x39, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x30, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x70, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x39, 0x0a,
	0x09, 0x74, 0x65, 0x72, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x65, 0x72, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x63,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x67, 0x65, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x6f, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x63,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x6f, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65,
	0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x3f, 0x0a, 0x0b,
	0x67, 0x65, 0x6f, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x47, 0x65,
	0x6f, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x0b, 0x67, 0x65, 0x6f, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a,
	0x12, 0x67, 0x65, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79,
	0x67, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x63, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x12, 0x67, 0x65, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79,
	0x67, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x63, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x77, 0x69, 0x6c, 0x64, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6f, 0x63, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12,
	0x2d, 0x0a, 0x05, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x42, 0x07,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x3f, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64,
	0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x1a, 0x4a, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x28, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x20, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x79, 0x6f, 0x6d, 0x69, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x04, 0x79, 0x6f, 0x6d, 0x69,
	0x12, 0x19, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x75, 0x0a, 0x15, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x32, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4a,
	0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x10, 0x08, 0x22,
	0x37, 0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x55,
	0x0a, 0x12, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b,
	0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x32, 0x93, 0x0b, 0x0a, 0x09,
	0x44, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x65, 0x0a, 0x0d, 0x4c, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x20, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4c,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x68, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x64, 0x6f, 0x63,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x49, 0x0a, 0x04, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x64, 0x6f, 0x63,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x2e,
	0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x1a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a,
	0x05, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x17, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a,
	0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x52, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12,
	0x13, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x1a, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x7d, 0x2f, 0x7b, 0x69, 0x64,
	0x3d, 0x2a, 0x2a, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x19, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x2a, 0x2a, 0x7d, 0x12, 0x59, 0x0a, 0x06,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x16, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x0a, 0x42, 0x75, 0x6c, 0x6b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x2a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x5d, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f,
	0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x10, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x20, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x1a, 0x1d, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x1a, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x2a,
	0x2a, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x64, 0x6f, 0x63, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x2a, 0x2a, 0x7d, 0x12, 0x3d,
	0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x18, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a,
	0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1a, 0x2e, 0x64, 0x6f, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_docsearch_proto_rawDescOnce sync.Once
	file_docsearch_proto_rawDescData = file_docsearch_proto_rawDesc
)

func file_docsearch_proto_rawDescGZIP() []byte {
	file_docsearch_proto_rawDescOnce.Do(func() {
		file_docsearch_proto_rawDescData = protoimpl.X.CompressGZIP(file_docsearch_proto_rawDescData)
	})
	return file_docsearch_proto_rawDescData
}

var file_docsearch_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_docsearch_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_docsearch_proto_goTypes = []interface{}{
	(MatchQuery_MatchOperator)(0),   // 0: docsearch.MatchQuery.MatchOperator
	(Event_Type)(0),                 // 1: docsearch.Event.Type
	(*LivenessCheckResponse)(nil),   // 2: docsearch.LivenessCheckResponse
	(*ReadinessCheckResponse)(nil),  // 3: docsearch.ReadinessCheckResponse
	(*Metadata)(nil),                // 4: docsearch.Metadata
	(*Node)(nil),                    // 5: docsearch.Node
	(*NodeResponse)(nil),            // 6: docsearch.NodeResponse
	(*JoinRequest)(nil),             // 7: docsearch.JoinRequest
	(*LeaveRequest)(nil),            // 8: docsearch.LeaveRequest
	(*Cluster)(nil),                 // 9: docsearch.Cluster
	(*ClusterResponse)(nil),         // 10: docsearch.ClusterResponse
	(*Document)(nil),                // 11: docsearch.Document
	(*Documents)(nil),               // 12: docsearch.Documents
	(*DeleteDocument)(nil),          // 13: docsearch.DeleteDocument
	(*DeleteDocuments)(nil),         // 14: docsearch.DeleteDocuments
	(*MatchQuery)(nil),              // 15: docsearch.MatchQuery
	(*MatchAllQuery)(nil),           // 16: docsearch.MatchAllQuery
	(*MatchNoneQuery)(nil),          // 17: docsearch.MatchNoneQuery
	(*MatchPhraseQuery)(nil),        // 18: docsearch.MatchPhraseQuery
	(*MultiPhraseQuery)(nil),        // 19: docsearch.MultiPhraseQuery
	(*PrefixQuery)(nil),             // 20: docsearch.PrefixQuery
	(*RegexpQuery)(nil),             // 21: docsearch.RegexpQuery
	(*TermQuery)(nil),               // 22: docsearch.TermQuery
	(*TermRangeQuery)(nil),          // 23: docsearch.TermRangeQuery
	(*BooleanQuery)(nil),            // 24: docsearch.BooleanQuery
	(*DateRangeQuery)(nil),          // 25: docsearch.DateRangeQuery
	(*GeoBoundingBoxQuery)(nil),     // 26: docsearch.GeoBoundingBoxQuery
	(*GeoPoint)(nil),                // 27: docsearch.GeoPoint
	(*GeoDistanceQuery)(nil),        // 28: docsearch.GeoDistanceQuery
	(*GeoBoundingPolygonQuery)(nil), // 29: docsearch.GeoBoundingPolygonQuery
	(*NumericRangeQuery)(nil),       // 30: docsearch.NumericRangeQuery
	(*WildcardQuery)(nil),           // 31: docsearch.WildcardQuery
	(*FuzzyQuery)(nil),              // 32: docsearch.FuzzyQuery
	(*Query)(nil),                   // 33: docsearch.Query
	(*SearchMetadataRequest)(nil),   // 34: docsearch.SearchMetadataRequest
	(*SearchRequest)(nil),           // 35: docsearch.SearchRequest
	(*SearchResponse)(nil),          // 36: docsearch.SearchResponse
	(*UserDictionaryRecord)(nil),    // 37: docsearch.UserDictionaryRecord
	(*UserDictionaryRecords)(nil),   // 38: docsearch.UserDictionaryRecords
	(*DictionaryResponse)(nil),      // 39: docsearch.DictionaryResponse
	(*DeleteDictionaryRequest)(nil), // 40: docsearch.DeleteDictionaryRequest
	(*DeleteDictionaries)(nil),      // 41: docsearch.DeleteDictionaries
	(*Event)(nil),                   // 42: docsearch.Event
	(*WatchResponse)(nil),           // 43: docsearch.WatchResponse
	(*GetMetadataRequest)(nil),      // 44: docsearch.GetMetadataRequest
	(*SetMetadataRequest)(nil),      // 45: docsearch.SetMetadataRequest
	(*DeleteMetadataRequest)(nil),   // 46: docsearch.DeleteMetadataRequest
	(*MetricsResponse)(nil),         // 47: docsearch.MetricsResponse
	nil,                             // 48: docsearch.Cluster.NodesEntry
	nil,                             // 49: docsearch.BooleanQuery.MustsEntry
	nil,                             // 50: docsearch.BooleanQuery.ShouldsEntry
	nil,                             // 51: docsearch.BooleanQuery.MustNotsEntry
	nil,                             // 52: docsearch.SearchRequest.QueryEntry
	(*anypb.Any)(nil),               // 53: google.protobuf.Any
	(*emptypb.Empty)(nil),           // 54: google.protobuf.Empty
}
var file_docsearch_proto_depIdxs = []int32{
	4,  // 0: docsearch.Node.metadata:type_name -> docsearch.Metadata
	5,  // 1: docsearch.NodeResponse.node:type_name -> docsearch.Node
	5,  // 2: docsearch.JoinRequest.node:type_name -> docsearch.Node
	48, // 3: docsearch.Cluster.nodes:type_name -> docsearch.Cluster.NodesEntry
	9,  // 4: docsearch.ClusterResponse.cluster:type_name -> docsearch.Cluster
	11, // 5: docsearch.Documents.requests:type_name -> docsearch.Document
	13, // 6: docsearch.DeleteDocuments.requests:type_name -> docsearch.DeleteDocument
	0,  // 7: docsearch.MatchQuery.operator:type_name -> docsearch.MatchQuery.MatchOperator
	49, // 8: docsearch.BooleanQuery.musts:type_name -> docsearch.BooleanQuery.MustsEntry
	50, // 9: docsearch.BooleanQuery.shoulds:type_name -> docsearch.BooleanQuery.ShouldsEntry
	51, // 10: docsearch.BooleanQuery.mustNots:type_name -> docsearch.BooleanQuery.MustNotsEntry
	27, // 11: docsearch.GeoDistanceQuery.point:type_name -> docsearch.GeoPoint
	27, // 12: docsearch.GeoBoundingPolygonQuery.points:type_name -> docsearch.GeoPoint
	16, // 13: docsearch.Query.matchAll:type_name -> docsearch.MatchAllQuery
	15, // 14: docsearch.Query.matchQuery:type_name -> docsearch.MatchQuery
	17, // 15: docsearch.Query.matchNone:type_name -> docsearch.MatchNoneQuery
	18, // 16: docsearch.Query.matchPhrase:type_name -> docsearch.MatchPhraseQuery
	19, // 17: docsearch.Query.multiPhrase:type_name -> docsearch.MultiPhraseQuery
	20, // 18: docsearch.Query.prefix:type_name -> docsearch.PrefixQuery
	21, // 19: docsearch.Query.regexp:type_name -> docsearch.RegexpQuery
	22, // 20: docsearch.Query.term:type_name -> docsearch.TermQuery
	23, // 21: docsearch.Query.termRange:type_name -> docsearch.TermRangeQuery
	24, // 22: docsearch.Query.bool:type_name -> docsearch.BooleanQuery
	25, // 23: docsearch.Query.dateRange:type_name -> docsearch.DateRangeQuery
	26, // 24: docsearch.Query.geoBoundingBox:type_name -> docsearch.GeoBoundingBoxQuery
	28, // 25: docsearch.Query.geoDistance:type_name -> docsearch.GeoDistanceQuery
	29, // 26: docsearch.Query.geoBoundingPolygon:type_name -> docsearch.GeoBoundingPolygonQuery
	30, // 27: docsearch.Query.numericRange:type_name -> docsearch.NumericRangeQuery
	31, // 28: docsearch.Query.wildcard:type_name -> docsearch.WildcardQuery
	32, // 29: docsearch.Query.fuzzy:type_name -> docsearch.FuzzyQuery
	34, // 30: docsearch.SearchRequest.metadata:type_name -> docsearch.SearchMetadataRequest
	52, // 31: docsearch.SearchRequest.query:type_name -> docsearch.SearchRequest.QueryEntry
	37, // 32: docsearch.UserDictionaryRecords.records:type_name -> docsearch.UserDictionaryRecord
	40, // 33: docsearch.DeleteDictionaries.requests:type_name -> docsearch.DeleteDictionaryRequest
	1,  // 34: docsearch.Event.type:type_name -> docsearch.Event.Type
	53, // 35: docsearch.Event.data:type_name -> google.protobuf.Any
	42, // 36: docsearch.WatchResponse.event:type_name -> docsearch.Event
	4,  // 37: docsearch.SetMetadataRequest.metadata:type_name -> docsearch.Metadata
	5,  // 38: docsearch.Cluster.NodesEntry.value:type_name -> docsearch.Node
	33, // 39: docsearch.BooleanQuery.MustsEntry.value:type_name -> docsearch.Query
	33, // 40: docsearch.BooleanQuery.ShouldsEntry.value:type_name -> docsearch.Query
	33, // 41: docsearch.BooleanQuery.MustNotsEntry.value:type_name -> docsearch.Query
	33, // 42: docsearch.SearchRequest.QueryEntry.value:type_name -> docsearch.Query
	54, // 43: docsearch.Docsearch.LivenessCheck:input_type -> google.protobuf.Empty
	54, // 44: docsearch.Docsearch.ReadinessCheck:input_type -> google.protobuf.Empty
	54, // 45: docsearch.Docsearch.Node:input_type -> google.protobuf.Empty
	7,  // 46: docsearch.Docsearch.Join:input_type -> docsearch.JoinRequest
	8,  // 47: docsearch.Docsearch.Leave:input_type -> docsearch.LeaveRequest
	54, // 48: docsearch.Docsearch.Cluster:input_type -> google.protobuf.Empty
	11, // 49: docsearch.Docsearch.Insert:input_type -> docsearch.Document
	13, // 50: docsearch.Docsearch.Delete:input_type -> docsearch.DeleteDocument
	12, // 51: docsearch.Docsearch.Upload:input_type -> docsearch.Documents
	14, // 52: docsearch.Docsearch.BulkDelete:input_type -> docsearch.DeleteDocuments
	35, // 53: docsearch.Docsearch.Search:input_type -> docsearch.SearchRequest
	38, // 54: docsearch.Docsearch.UploadDictionary:input_type -> docsearch.UserDictionaryRecords
	40, // 55: docsearch.Docsearch.DeleteDictionary:input_type -> docsearch.DeleteDictionaryRequest
	54, // 56: docsearch.Docsearch.Watch:input_type -> google.protobuf.Empty
	54, // 57: docsearch.Docsearch.Metrics:input_type -> google.protobuf.Empty
	2,  // 58: docsearch.Docsearch.LivenessCheck:output_type -> docsearch.LivenessCheckResponse
	3,  // 59: docsearch.Docsearch.ReadinessCheck:output_type -> docsearch.ReadinessCheckResponse
	6,  // 60: docsearch.Docsearch.Node:output_type -> docsearch.NodeResponse
	54, // 61: docsearch.Docsearch.Join:output_type -> google.protobuf.Empty
	54, // 62: docsearch.Docsearch.Leave:output_type -> google.protobuf.Empty
	10, // 63: docsearch.Docsearch.Cluster:output_type -> docsearch.ClusterResponse
	54, // 64: docsearch.Docsearch.Insert:output_type -> google.protobuf.Empty
	54, // 65: docsearch.Docsearch.Delete:output_type -> google.protobuf.Empty
	54, // 66: docsearch.Docsearch.Upload:output_type -> google.protobuf.Empty
	54, // 67: docsearch.Docsearch.BulkDelete:output_type -> google.protobuf.Empty
	36, // 68: docsearch.Docsearch.Search:output_type -> docsearch.SearchResponse
	39, // 69: docsearch.Docsearch.UploadDictionary:output_type -> docsearch.DictionaryResponse
	39, // 70: docsearch.Docsearch.DeleteDictionary:output_type -> docsearch.DictionaryResponse
	43, // 71: docsearch.Docsearch.Watch:output_type -> docsearch.WatchResponse
	47, // 72: docsearch.Docsearch.Metrics:output_type -> docsearch.MetricsResponse
	58, // [58:73] is the sub-list for method output_type
	43, // [43:58] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_docsearch_proto_init() }
func file_docsearch_proto_init() {
	if File_docsearch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_docsearch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadinessCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Documents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDocuments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchAllQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchNoneQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPhraseQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiPhraseQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegexpQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermRangeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateRangeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoBoundingBoxQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoDistanceQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoBoundingPolygonQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericRangeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WildcardQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzyQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDictionaryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDictionaryRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DictionaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDictionaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDictionaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docsearch_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_docsearch_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*Query_MatchAll)(nil),
		(*Query_MatchQuery)(nil),
		(*Query_MatchNone)(nil),
		(*Query_MatchPhrase)(nil),
		(*Query_MultiPhrase)(nil),
		(*Query_Prefix)(nil),
		(*Query_Regexp)(nil),
		(*Query_Term)(nil),
		(*Query_TermRange)(nil),
		(*Query_Bool)(nil),
		(*Query_DateRange)(nil),
		(*Query_GeoBoundingBox)(nil),
		(*Query_GeoDistance)(nil),
		(*Query_GeoBoundingPolygon)(nil),
		(*Query_NumericRange)(nil),
		(*Query_Wildcard)(nil),
		(*Query_Fuzzy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_docsearch_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_docsearch_proto_goTypes,
		DependencyIndexes: file_docsearch_proto_depIdxs,
		EnumInfos:         file_docsearch_proto_enumTypes,
		MessageInfos:      file_docsearch_proto_msgTypes,
	}.Build()
	File_docsearch_proto = out.File
	file_docsearch_proto_rawDesc = nil
	file_docsearch_proto_goTypes = nil
	file_docsearch_proto_depIdxs = nil
}
