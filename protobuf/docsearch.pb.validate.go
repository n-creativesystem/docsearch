// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: docsearch.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on LivenessCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LivenessCheckResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Alive

	return nil
}

// LivenessCheckResponseValidationError is the validation error returned by
// LivenessCheckResponse.Validate if the designated constraints aren't met.
type LivenessCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LivenessCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LivenessCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LivenessCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LivenessCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LivenessCheckResponseValidationError) ErrorName() string {
	return "LivenessCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LivenessCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLivenessCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LivenessCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LivenessCheckResponseValidationError{}

// Validate checks the field values on ReadinessCheckResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadinessCheckResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ready

	return nil
}

// ReadinessCheckResponseValidationError is the validation error returned by
// ReadinessCheckResponse.Validate if the designated constraints aren't met.
type ReadinessCheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadinessCheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadinessCheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadinessCheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadinessCheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadinessCheckResponseValidationError) ErrorName() string {
	return "ReadinessCheckResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadinessCheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadinessCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadinessCheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadinessCheckResponseValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Metadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GrpcAddress

	// no validation rules for HttpAddress

	return nil
}

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on Node with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Node) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RaftAddress

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	return nil
}

// NodeValidationError is the validation error returned by Node.Validate if the
// designated constraints aren't met.
type NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeValidationError) ErrorName() string { return "NodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeValidationError{}

// Validate checks the field values on NodeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NodeResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeResponseValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NodeResponseValidationError is the validation error returned by
// NodeResponse.Validate if the designated constraints aren't met.
type NodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeResponseValidationError) ErrorName() string { return "NodeResponseValidationError" }

// Error satisfies the builtin error interface
func (e NodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeResponseValidationError{}

// Validate checks the field values on JoinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JoinRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return JoinRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinRequestValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// JoinRequestValidationError is the validation error returned by
// JoinRequest.Validate if the designated constraints aren't met.
type JoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRequestValidationError) ErrorName() string { return "JoinRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRequestValidationError{}

// Validate checks the field values on LeaveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LeaveRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return LeaveRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// LeaveRequestValidationError is the validation error returned by
// LeaveRequest.Validate if the designated constraints aren't met.
type LeaveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveRequestValidationError) ErrorName() string { return "LeaveRequestValidationError" }

// Error satisfies the builtin error interface
func (e LeaveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveRequestValidationError{}

// Validate checks the field values on Cluster with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Cluster) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetNodes() {
		_ = val

		// no validation rules for Nodes[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterValidationError{
					field:  fmt.Sprintf("Nodes[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Leader

	return nil
}

// ClusterValidationError is the validation error returned by Cluster.Validate
// if the designated constraints aren't met.
type ClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterValidationError) ErrorName() string { return "ClusterValidationError" }

// Error satisfies the builtin error interface
func (e ClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterValidationError{}

// Validate checks the field values on ClusterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ClusterResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterResponseValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ClusterResponseValidationError is the validation error returned by
// ClusterResponse.Validate if the designated constraints aren't met.
type ClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterResponseValidationError) ErrorName() string { return "ClusterResponseValidationError" }

// Error satisfies the builtin error interface
func (e ClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterResponseValidationError{}

// Validate checks the field values on Document with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Document) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return DocumentValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DocumentValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Fields

	return nil
}

// DocumentValidationError is the validation error returned by
// Document.Validate if the designated constraints aren't met.
type DocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentValidationError) ErrorName() string { return "DocumentValidationError" }

// Error satisfies the builtin error interface
func (e DocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentValidationError{}

// Validate checks the field values on Documents with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Documents) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return DocumentsValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if len(m.GetRequests()) < 1 {
		return DocumentsValidationError{
			field:  "Requests",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentsValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DocumentsValidationError is the validation error returned by
// Documents.Validate if the designated constraints aren't met.
type DocumentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentsValidationError) ErrorName() string { return "DocumentsValidationError" }

// Error satisfies the builtin error interface
func (e DocumentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocuments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentsValidationError{}

// Validate checks the field values on DeleteDocument with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteDocument) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DeleteDocumentValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return DeleteDocumentValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteDocumentValidationError is the validation error returned by
// DeleteDocument.Validate if the designated constraints aren't met.
type DeleteDocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentValidationError) ErrorName() string { return "DeleteDocumentValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentValidationError{}

// Validate checks the field values on DeleteDocuments with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteDocuments) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return DeleteDocumentsValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if len(m.GetRequests()) < 1 {
		return DeleteDocumentsValidationError{
			field:  "Requests",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteDocumentsValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DeleteDocumentsValidationError is the validation error returned by
// DeleteDocuments.Validate if the designated constraints aren't met.
type DeleteDocumentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentsValidationError) ErrorName() string { return "DeleteDocumentsValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDocumentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocuments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentsValidationError{}

// Validate checks the field values on MatchQuery with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MatchQuery) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetMatch()) < 1 {
		return MatchQueryValidationError{
			field:  "Match",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetField()) < 1 {
		return MatchQueryValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for AnalyzerName

	// no validation rules for Boost

	// no validation rules for Operator

	return nil
}

// MatchQueryValidationError is the validation error returned by
// MatchQuery.Validate if the designated constraints aren't met.
type MatchQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchQueryValidationError) ErrorName() string { return "MatchQueryValidationError" }

// Error satisfies the builtin error interface
func (e MatchQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchQueryValidationError{}

// Validate checks the field values on MatchAllQuery with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MatchAllQuery) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Boost

	return nil
}

// MatchAllQueryValidationError is the validation error returned by
// MatchAllQuery.Validate if the designated constraints aren't met.
type MatchAllQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchAllQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchAllQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchAllQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchAllQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchAllQueryValidationError) ErrorName() string { return "MatchAllQueryValidationError" }

// Error satisfies the builtin error interface
func (e MatchAllQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchAllQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchAllQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchAllQueryValidationError{}

// Validate checks the field values on MatchNoneQuery with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MatchNoneQuery) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Boost

	return nil
}

// MatchNoneQueryValidationError is the validation error returned by
// MatchNoneQuery.Validate if the designated constraints aren't met.
type MatchNoneQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchNoneQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchNoneQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchNoneQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchNoneQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchNoneQueryValidationError) ErrorName() string { return "MatchNoneQueryValidationError" }

// Error satisfies the builtin error interface
func (e MatchNoneQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchNoneQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchNoneQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchNoneQueryValidationError{}

// Validate checks the field values on MatchPhraseQuery with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MatchPhraseQuery) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetMatchPhrase()) < 1 {
		return MatchPhraseQueryValidationError{
			field:  "MatchPhrase",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetField()) < 1 {
		return MatchPhraseQueryValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for AnalyzerName

	// no validation rules for Boost

	// no validation rules for Slop

	return nil
}

// MatchPhraseQueryValidationError is the validation error returned by
// MatchPhraseQuery.Validate if the designated constraints aren't met.
type MatchPhraseQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchPhraseQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchPhraseQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchPhraseQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchPhraseQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchPhraseQueryValidationError) ErrorName() string { return "MatchPhraseQueryValidationError" }

// Error satisfies the builtin error interface
func (e MatchPhraseQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchPhraseQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchPhraseQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchPhraseQueryValidationError{}

// Validate checks the field values on MultiPhraseQuery with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MultiPhraseQuery) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetTerms()) < 1 {
		return MultiPhraseQueryValidationError{
			field:  "Terms",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if utf8.RuneCountInString(m.GetField()) < 1 {
		return MultiPhraseQueryValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Boost

	// no validation rules for Slop

	return nil
}

// MultiPhraseQueryValidationError is the validation error returned by
// MultiPhraseQuery.Validate if the designated constraints aren't met.
type MultiPhraseQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiPhraseQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiPhraseQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiPhraseQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiPhraseQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiPhraseQueryValidationError) ErrorName() string { return "MultiPhraseQueryValidationError" }

// Error satisfies the builtin error interface
func (e MultiPhraseQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiPhraseQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiPhraseQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiPhraseQueryValidationError{}

// Validate checks the field values on PrefixQuery with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PrefixQuery) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetPrefix()) < 1 {
		return PrefixQueryValidationError{
			field:  "Prefix",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetField()) < 1 {
		return PrefixQueryValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Boost

	return nil
}

// PrefixQueryValidationError is the validation error returned by
// PrefixQuery.Validate if the designated constraints aren't met.
type PrefixQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrefixQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrefixQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrefixQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrefixQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrefixQueryValidationError) ErrorName() string { return "PrefixQueryValidationError" }

// Error satisfies the builtin error interface
func (e PrefixQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrefixQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrefixQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrefixQueryValidationError{}

// Validate checks the field values on RegexpQuery with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegexpQuery) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetRegexp()) < 1 {
		return RegexpQueryValidationError{
			field:  "Regexp",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetField()) < 1 {
		return RegexpQueryValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Boost

	return nil
}

// RegexpQueryValidationError is the validation error returned by
// RegexpQuery.Validate if the designated constraints aren't met.
type RegexpQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegexpQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegexpQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegexpQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegexpQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegexpQueryValidationError) ErrorName() string { return "RegexpQueryValidationError" }

// Error satisfies the builtin error interface
func (e RegexpQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegexpQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegexpQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegexpQueryValidationError{}

// Validate checks the field values on TermQuery with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TermQuery) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetTerm()) < 1 {
		return TermQueryValidationError{
			field:  "Term",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetField()) < 1 {
		return TermQueryValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Boost

	return nil
}

// TermQueryValidationError is the validation error returned by
// TermQuery.Validate if the designated constraints aren't met.
type TermQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TermQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TermQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TermQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TermQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TermQueryValidationError) ErrorName() string { return "TermQueryValidationError" }

// Error satisfies the builtin error interface
func (e TermQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTermQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TermQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TermQueryValidationError{}

// Validate checks the field values on TermRangeQuery with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TermRangeQuery) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Min

	// no validation rules for Max

	if utf8.RuneCountInString(m.GetField()) < 1 {
		return TermRangeQueryValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Boost

	return nil
}

// TermRangeQueryValidationError is the validation error returned by
// TermRangeQuery.Validate if the designated constraints aren't met.
type TermRangeQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TermRangeQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TermRangeQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TermRangeQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TermRangeQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TermRangeQueryValidationError) ErrorName() string { return "TermRangeQueryValidationError" }

// Error satisfies the builtin error interface
func (e TermRangeQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTermRangeQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TermRangeQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TermRangeQueryValidationError{}

// Validate checks the field values on BooleanQuery with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BooleanQuery) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetMusts() {
		_ = val

		// no validation rules for Musts[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BooleanQueryValidationError{
					field:  fmt.Sprintf("Musts[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetShoulds() {
		_ = val

		// no validation rules for Shoulds[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BooleanQueryValidationError{
					field:  fmt.Sprintf("Shoulds[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetMustNots() {
		_ = val

		// no validation rules for MustNots[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BooleanQueryValidationError{
					field:  fmt.Sprintf("MustNots[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Boost

	// no validation rules for MinShould

	return nil
}

// BooleanQueryValidationError is the validation error returned by
// BooleanQuery.Validate if the designated constraints aren't met.
type BooleanQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BooleanQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BooleanQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BooleanQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BooleanQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BooleanQueryValidationError) ErrorName() string { return "BooleanQueryValidationError" }

// Error satisfies the builtin error interface
func (e BooleanQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBooleanQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BooleanQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BooleanQueryValidationError{}

// Validate checks the field values on DateRangeQuery with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DateRangeQuery) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Start

	// no validation rules for End

	if utf8.RuneCountInString(m.GetField()) < 1 {
		return DateRangeQueryValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Boost

	return nil
}

// DateRangeQueryValidationError is the validation error returned by
// DateRangeQuery.Validate if the designated constraints aren't met.
type DateRangeQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DateRangeQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DateRangeQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DateRangeQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DateRangeQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DateRangeQueryValidationError) ErrorName() string { return "DateRangeQueryValidationError" }

// Error satisfies the builtin error interface
func (e DateRangeQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDateRangeQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DateRangeQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DateRangeQueryValidationError{}

// Validate checks the field values on GeoBoundingBoxQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GeoBoundingBoxQuery) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TopLeftLon

	// no validation rules for TopLeftLat

	// no validation rules for BottomRightLon

	// no validation rules for BottomRightLat

	if utf8.RuneCountInString(m.GetField()) < 1 {
		return GeoBoundingBoxQueryValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Boost

	return nil
}

// GeoBoundingBoxQueryValidationError is the validation error returned by
// GeoBoundingBoxQuery.Validate if the designated constraints aren't met.
type GeoBoundingBoxQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeoBoundingBoxQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeoBoundingBoxQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeoBoundingBoxQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeoBoundingBoxQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeoBoundingBoxQueryValidationError) ErrorName() string {
	return "GeoBoundingBoxQueryValidationError"
}

// Error satisfies the builtin error interface
func (e GeoBoundingBoxQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeoBoundingBoxQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeoBoundingBoxQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeoBoundingBoxQueryValidationError{}

// Validate checks the field values on GeoPoint with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GeoPoint) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Lon

	// no validation rules for Lat

	return nil
}

// GeoPointValidationError is the validation error returned by
// GeoPoint.Validate if the designated constraints aren't met.
type GeoPointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeoPointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeoPointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeoPointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeoPointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeoPointValidationError) ErrorName() string { return "GeoPointValidationError" }

// Error satisfies the builtin error interface
func (e GeoPointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeoPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeoPointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeoPointValidationError{}

// Validate checks the field values on GeoDistanceQuery with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GeoDistanceQuery) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPoint() == nil {
		return GeoDistanceQueryValidationError{
			field:  "Point",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GeoDistanceQueryValidationError{
				field:  "Point",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Distance

	if utf8.RuneCountInString(m.GetField()) < 1 {
		return GeoDistanceQueryValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Boost

	return nil
}

// GeoDistanceQueryValidationError is the validation error returned by
// GeoDistanceQuery.Validate if the designated constraints aren't met.
type GeoDistanceQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeoDistanceQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeoDistanceQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeoDistanceQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeoDistanceQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeoDistanceQueryValidationError) ErrorName() string { return "GeoDistanceQueryValidationError" }

// Error satisfies the builtin error interface
func (e GeoDistanceQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeoDistanceQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeoDistanceQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeoDistanceQueryValidationError{}

// Validate checks the field values on GeoBoundingPolygonQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GeoBoundingPolygonQuery) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetPoints()) < 1 {
		return GeoBoundingPolygonQueryValidationError{
			field:  "Points",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GeoBoundingPolygonQueryValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetField()) < 1 {
		return GeoBoundingPolygonQueryValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Boost

	return nil
}

// GeoBoundingPolygonQueryValidationError is the validation error returned by
// GeoBoundingPolygonQuery.Validate if the designated constraints aren't met.
type GeoBoundingPolygonQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeoBoundingPolygonQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeoBoundingPolygonQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeoBoundingPolygonQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeoBoundingPolygonQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeoBoundingPolygonQueryValidationError) ErrorName() string {
	return "GeoBoundingPolygonQueryValidationError"
}

// Error satisfies the builtin error interface
func (e GeoBoundingPolygonQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeoBoundingPolygonQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeoBoundingPolygonQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeoBoundingPolygonQueryValidationError{}

// Validate checks the field values on NumericRangeQuery with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NumericRangeQuery) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Min

	// no validation rules for Max

	if utf8.RuneCountInString(m.GetField()) < 1 {
		return NumericRangeQueryValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Boost

	return nil
}

// NumericRangeQueryValidationError is the validation error returned by
// NumericRangeQuery.Validate if the designated constraints aren't met.
type NumericRangeQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumericRangeQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumericRangeQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumericRangeQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumericRangeQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumericRangeQueryValidationError) ErrorName() string {
	return "NumericRangeQueryValidationError"
}

// Error satisfies the builtin error interface
func (e NumericRangeQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumericRangeQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumericRangeQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumericRangeQueryValidationError{}

// Validate checks the field values on WildcardQuery with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WildcardQuery) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetWildcard()) < 1 {
		return WildcardQueryValidationError{
			field:  "Wildcard",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetField()) < 1 {
		return WildcardQueryValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Boost

	return nil
}

// WildcardQueryValidationError is the validation error returned by
// WildcardQuery.Validate if the designated constraints aren't met.
type WildcardQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WildcardQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WildcardQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WildcardQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WildcardQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WildcardQueryValidationError) ErrorName() string { return "WildcardQueryValidationError" }

// Error satisfies the builtin error interface
func (e WildcardQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWildcardQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WildcardQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WildcardQueryValidationError{}

// Validate checks the field values on FuzzyQuery with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FuzzyQuery) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetTerm()) < 1 {
		return FuzzyQueryValidationError{
			field:  "Term",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Prefix

	// no validation rules for Fuzziness

	if utf8.RuneCountInString(m.GetField()) < 1 {
		return FuzzyQueryValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Boost

	return nil
}

// FuzzyQueryValidationError is the validation error returned by
// FuzzyQuery.Validate if the designated constraints aren't met.
type FuzzyQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FuzzyQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FuzzyQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FuzzyQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FuzzyQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FuzzyQueryValidationError) ErrorName() string { return "FuzzyQueryValidationError" }

// Error satisfies the builtin error interface
func (e FuzzyQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFuzzyQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FuzzyQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FuzzyQueryValidationError{}

// Validate checks the field values on Query with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Query) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Query.(type) {

	case *Query_MatchAll:

		if v, ok := interface{}(m.GetMatchAll()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "MatchAll",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_MatchQuery:

		if v, ok := interface{}(m.GetMatchQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "MatchQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_MatchNone:

		if v, ok := interface{}(m.GetMatchNone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "MatchNone",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_MatchPhrase:

		if v, ok := interface{}(m.GetMatchPhrase()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "MatchPhrase",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_MultiPhrase:

		if v, ok := interface{}(m.GetMultiPhrase()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "MultiPhrase",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_Prefix:

		if v, ok := interface{}(m.GetPrefix()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "Prefix",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_Regexp:

		if v, ok := interface{}(m.GetRegexp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "Regexp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_Term:

		if v, ok := interface{}(m.GetTerm()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "Term",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_TermRange:

		if v, ok := interface{}(m.GetTermRange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "TermRange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_Bool:

		if v, ok := interface{}(m.GetBool()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "Bool",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_DateRange:

		if v, ok := interface{}(m.GetDateRange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "DateRange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_GeoBoundingBox:

		if v, ok := interface{}(m.GetGeoBoundingBox()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "GeoBoundingBox",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_GeoDistance:

		if v, ok := interface{}(m.GetGeoDistance()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "GeoDistance",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_GeoBoundingPolygon:

		if v, ok := interface{}(m.GetGeoBoundingPolygon()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "GeoBoundingPolygon",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_NumericRange:

		if v, ok := interface{}(m.GetNumericRange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "NumericRange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_Wildcard:

		if v, ok := interface{}(m.GetWildcard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "Wildcard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Query_Fuzzy:

		if v, ok := interface{}(m.GetFuzzy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryValidationError{
					field:  "Fuzzy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// QueryValidationError is the validation error returned by Query.Validate if
// the designated constraints aren't met.
type QueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryValidationError) ErrorName() string { return "QueryValidationError" }

// Error satisfies the builtin error interface
func (e QueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryValidationError{}

// Validate checks the field values on SearchMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SearchMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for From

	// no validation rules for Size

	return nil
}

// SearchMetadataRequestValidationError is the validation error returned by
// SearchMetadataRequest.Validate if the designated constraints aren't met.
type SearchMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMetadataRequestValidationError) ErrorName() string {
	return "SearchMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMetadataRequestValidationError{}

// Validate checks the field values on SearchRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SearchRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetQuery() {
		_ = val

		// no validation rules for Query[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchRequestValidationError{
					field:  fmt.Sprintf("Query[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return SearchRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// SearchRequestValidationError is the validation error returned by
// SearchRequest.Validate if the designated constraints aren't met.
type SearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRequestValidationError) ErrorName() string { return "SearchRequestValidationError" }

// Error satisfies the builtin error interface
func (e SearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRequestValidationError{}

// Validate checks the field values on SearchResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SearchResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// SearchResponseValidationError is the validation error returned by
// SearchResponse.Validate if the designated constraints aren't met.
type SearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResponseValidationError) ErrorName() string { return "SearchResponseValidationError" }

// Error satisfies the builtin error interface
func (e SearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResponseValidationError{}

// Validate checks the field values on UserDictionaryRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UserDictionaryRecord) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetText()) < 1 {
		return UserDictionaryRecordValidationError{
			field:  "Text",
			reason: "value length must be at least 1 runes",
		}
	}

	if len(m.GetTokens()) < 1 {
		return UserDictionaryRecordValidationError{
			field:  "Tokens",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if len(m.GetYomi()) < 1 {
		return UserDictionaryRecordValidationError{
			field:  "Yomi",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if utf8.RuneCountInString(m.GetPos()) < 1 {
		return UserDictionaryRecordValidationError{
			field:  "Pos",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// UserDictionaryRecordValidationError is the validation error returned by
// UserDictionaryRecord.Validate if the designated constraints aren't met.
type UserDictionaryRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDictionaryRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDictionaryRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDictionaryRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDictionaryRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDictionaryRecordValidationError) ErrorName() string {
	return "UserDictionaryRecordValidationError"
}

// Error satisfies the builtin error interface
func (e UserDictionaryRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDictionaryRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDictionaryRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDictionaryRecordValidationError{}

// Validate checks the field values on UserDictionaryRecords with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UserDictionaryRecords) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return UserDictionaryRecordsValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if len(m.GetRecords()) < 1 {
		return UserDictionaryRecordsValidationError{
			field:  "Records",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserDictionaryRecordsValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UserDictionaryRecordsValidationError is the validation error returned by
// UserDictionaryRecords.Validate if the designated constraints aren't met.
type UserDictionaryRecordsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDictionaryRecordsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDictionaryRecordsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDictionaryRecordsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDictionaryRecordsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDictionaryRecordsValidationError) ErrorName() string {
	return "UserDictionaryRecordsValidationError"
}

// Error satisfies the builtin error interface
func (e UserDictionaryRecordsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDictionaryRecords.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDictionaryRecordsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDictionaryRecordsValidationError{}

// Validate checks the field values on DictionaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DictionaryResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Results

	return nil
}

// DictionaryResponseValidationError is the validation error returned by
// DictionaryResponse.Validate if the designated constraints aren't met.
type DictionaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictionaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictionaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictionaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictionaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictionaryResponseValidationError) ErrorName() string {
	return "DictionaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DictionaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictionaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictionaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictionaryResponseValidationError{}

// Validate checks the field values on DeleteDictionaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteDictionaryRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DeleteDictionaryRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteDictionaryRequestValidationError is the validation error returned by
// DeleteDictionaryRequest.Validate if the designated constraints aren't met.
type DeleteDictionaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictionaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictionaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictionaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictionaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictionaryRequestValidationError) ErrorName() string {
	return "DeleteDictionaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictionaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictionaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictionaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictionaryRequestValidationError{}

// Validate checks the field values on DeleteDictionaries with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteDictionaries) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetRequests()) < 1 {
		return DeleteDictionariesValidationError{
			field:  "Requests",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteDictionariesValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DeleteDictionariesValidationError is the validation error returned by
// DeleteDictionaries.Validate if the designated constraints aren't met.
type DeleteDictionariesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictionariesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictionariesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictionariesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictionariesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictionariesValidationError) ErrorName() string {
	return "DeleteDictionariesValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictionariesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictionaries.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictionariesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictionariesValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Event) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on WatchResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WatchResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WatchResponseValidationError is the validation error returned by
// WatchResponse.Validate if the designated constraints aren't met.
type WatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchResponseValidationError) ErrorName() string { return "WatchResponseValidationError" }

// Error satisfies the builtin error interface
func (e WatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchResponseValidationError{}

// Validate checks the field values on GetMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetMetadataRequestValidationError is the validation error returned by
// GetMetadataRequest.Validate if the designated constraints aren't met.
type GetMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetadataRequestValidationError) ErrorName() string {
	return "GetMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetadataRequestValidationError{}

// Validate checks the field values on SetMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetMetadataRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetMetadataRequestValidationError is the validation error returned by
// SetMetadataRequest.Validate if the designated constraints aren't met.
type SetMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMetadataRequestValidationError) ErrorName() string {
	return "SetMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMetadataRequestValidationError{}

// Validate checks the field values on DeleteMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteMetadataRequestValidationError is the validation error returned by
// DeleteMetadataRequest.Validate if the designated constraints aren't met.
type DeleteMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMetadataRequestValidationError) ErrorName() string {
	return "DeleteMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMetadataRequestValidationError{}

// Validate checks the field values on MetricsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MetricsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Metrics

	return nil
}

// MetricsResponseValidationError is the validation error returned by
// MetricsResponse.Validate if the designated constraints aren't met.
type MetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsResponseValidationError) ErrorName() string { return "MetricsResponseValidationError" }

// Error satisfies the builtin error interface
func (e MetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsResponseValidationError{}
